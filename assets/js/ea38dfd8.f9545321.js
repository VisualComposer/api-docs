"use strict";(self.webpackChunktest_docs=self.webpackChunktest_docs||[]).push([[719],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),u=s,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,r=new Array(o);r[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[m]="string"==typeof e?e:s,r[1]=i;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3696:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=n(7462),s=(n(7294),n(3905));const o={},r="Component Structure",i={unversionedId:"element-component/component-structure",id:"element-component/component-structure",isDocsHomePage:!1,title:"Component Structure",description:"The element component consists of is a React class component that extends the Visual Composer element's class: vcvAPI.elementComponent.",source:"@site/docs/element-component/component-structure.md",sourceDirName:"element-component",slug:"/element-component/component-structure",permalink:"/element-component/component-structure",editUrl:"https://github.com/VisualComposer/api-docs/edit/main/docs/element-component/component-structure.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Inner Elements",permalink:"/inner-elements/inner-elements"},next:{title:"Element Component Methods",permalink:"/element-component/element-component-methods"}},l=[{value:"Imports",id:"imports",children:[]},{value:"Define component class",id:"define-component-class",children:[]},{value:"Render method",id:"render-method",children:[{value:"CSS classes",id:"css-classes",children:[]},{value:"HTML Attributes",id:"html-attributes",children:[]},{value:"Handle Design Options",id:"handle-design-options",children:[]},{value:"Return value",id:"return-value",children:[]}]},{value:"Example",id:"example",children:[]}],c={toc:l},p="wrapper";function m(e){let{components:t,...n}=e;return(0,s.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"component-structure"},"Component Structure"),(0,s.kt)("p",null,"The element component consists of is a ",(0,s.kt)("a",{parentName:"p",href:"https://react.dev/reference/react/Component#defining-a-class-component"},"React class component")," that extends the Visual Composer element's class: ",(0,s.kt)("inlineCode",{parentName:"p"},"vcvAPI.elementComponent"),"."),(0,s.kt)("p",null,"This component is used only in the editor and contains element ",(0,s.kt)("a",{parentName:"p",href:"/element-component/element-component-methods"},"built-in methods")," that provide additional functionality."),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},(0,s.kt)("strong",{parentName:"p"},"On the View Page there are no React component, only compiled HTML structure is displayed.")))),(0,s.kt)("h2",{id:"imports"},"Imports"),(0,s.kt)("p",null,"At the top of the file you have to import ",(0,s.kt)("a",{parentName:"p",href:"https://react.dev/"},"React")," library and ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/wpbakery/vc-cake"},"vcCake")," library to use the ",(0,s.kt)("inlineCode",{parentName:"p"},"api")," ",(0,s.kt)("a",{parentName:"p",href:"/public-api/services"},"service"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react'\nimport vcCake from 'vc-cake'\n\nconst vcvAPI = vcCake.getService('api')\n")),(0,s.kt)("h2",{id:"define-component-class"},"Define component class"),(0,s.kt)("p",null,"You'll need to create your custom element class by extending the ",(0,s.kt)("inlineCode",{parentName:"p"},"vcvAPI.elementComponent"),". It will contain a lot of custom code, mostly related to rendering content in the editor."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"export default class CustomElement extends vcvAPI.elementComponent {\n  // code for your component goes here\n}\n")),(0,s.kt)("h2",{id:"render-method"},"Render method"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"render")," is the method of a React class component where you'll be writing most of your code. If you\u2019re not familiar with React, this method will return a markup for the element. Here we can get the values of the element attributes, make decisions based on conditions, define CSS classes and write markup in ",(0,s.kt)("a",{parentName:"p",href:"https://react.dev/learn/writing-markup-with-jsx"},"JSX"),"."),(0,s.kt)("p",null,"The first thing you need to do inside the ",(0,s.kt)("inlineCode",{parentName:"p"},"render")," method is to destruct ",(0,s.kt)("inlineCode",{parentName:"p"},"this.props")," object to get the ",(0,s.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"atts")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"editor")," variables."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"id")," is the unique ID of the element and is used to recognize the element by the editor;"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"atts")," is the attributes of the element, the ones that are set inside the ",(0,s.kt)("em",{parentName:"li"},"settings.json")," file;"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"editor")," object holds data attributes necessary for the editor (for drag and drop).")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"render () {\n  const { id, atts, editor } = this.props\n  // We also destruct the atts prop to get the attribute values.\n  const { output, customClass, metaCustomId, extraDataAttributes } = atts\n}\n")),(0,s.kt)("h3",{id:"css-classes"},"CSS classes"),(0,s.kt)("p",null,"To handle CSS classes you can define variables, assign them to a string and later concatenate strings or use the ",(0,s.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/classnames"},(0,s.kt)("inlineCode",{parentName:"a"},"classNames")," package"),"."),(0,s.kt)("p",null,"You also need to specify a ",(0,s.kt)("inlineCode",{parentName:"p"},"vce")," class. This class will add a default ",(0,s.kt)("inlineCode",{parentName:"p"},"margin-bottom: 30px")," for the Design Options. It will ensure there is a space between the current and next element."),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Make sure that the ",(0,s.kt)("inlineCode",{parentName:"p"},"vce")," class name is set to the same HTML tag which will contain Design Options object."))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"render () {\n  const { id, atts, editor } = this.props\n  // We also destruct the atts prop to get the attribute values.\n  const { output, customClass, metaCustomId, extraDataAttributes } = atts\n\n  let textBlockClasses = 'vce-text-block'\n  const wrapperClasses = 'vce-text-block-wrapper vce'\n\n  // check if custom class value exists and add it to textBlockClasses variable\n  if (typeof customClass === 'string' && customClass) {\n    textBlockClasses = textBlockClasses.concat(' ' + customClass)\n  }\n}\n")),(0,s.kt)("h3",{id:"html-attributes"},"HTML Attributes"),(0,s.kt)("p",null,"To assign HTML attributes like Custom Element ID and Extra Data Attributes, you'll need to create a ",(0,s.kt)("inlineCode",{parentName:"p"},"customProps")," variable (object) and assign it to ",(0,s.kt)("a",{parentName:"p",href:"/element-component/element-component-methods#getextradataattributes"},(0,s.kt)("inlineCode",{parentName:"a"},"this.getExtraDataAttributes()")," method")," which will take the ",(0,s.kt)("inlineCode",{parentName:"p"},"extraDataAttributes")," attribute variable to get its values and set properties for the object."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"render () {\n  const { id, atts, editor } = this.props\n  // We also destruct the atts prop to get the attribute values.\n  const { output, customClass, metaCustomId, extraDataAttributes } = atts\n\n  let textBlockClasses = 'vce-text-block'\n  const wrapperClasses = 'vce-text-block-wrapper vce'\n\n  // check if Custom Class value exists and add it to textBlockClasses variable\n  if (typeof customClass === 'string' && customClass) {\n    textBlockClasses = textBlockClasses.concat(' ' + customClass)\n  }\n\n  const customProps = this.getExtraDataAttributes(extraDataAttributes)\n\n  // check if custom Custom Element ID value exists and create a property in the customProps object\n  if (metaCustomId) {\n    customProps.id = metaCustomId\n  }\n}\n")),(0,s.kt)("h3",{id:"handle-design-options"},"Handle Design Options"),(0,s.kt)("p",null,"To get the Design Options we use another element ",(0,s.kt)("a",{parentName:"p",href:"/element-component/element-component-methods#applydo"},"build-in method")," ",(0,s.kt)("inlineCode",{parentName:"p"},"this.applyDO('all')"),". It accepts a string argument which may contain different data. We will store in a variable and use the ",(0,s.kt)("inlineCode",{parentName:"p"},"all")," argument to get all of the Design Options attributes."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"render () {\n  const { id, atts, editor } = this.props\n  // We also destruct the atts prop to get the attribute values.\n  const { output, customClass, metaCustomId, extraDataAttributes } = atts\n\n  let textBlockClasses = 'vce-text-block'\n  const wrapperClasses = 'vce-text-block-wrapper vce'\n\n  // check if Custom Class value exists and add it to textBlockClasses variable\n  if (typeof customClass === 'string' && customClass) {\n    textBlockClasses = textBlockClasses.concat(' ' + customClass)\n  }\n\n  const customProps = this.getExtraDataAttributes(extraDataAttributes)\n\n  // check if custom Custom Element ID value exists and create a property in the customProps object\n  if (metaCustomId) {\n    customProps.id = metaCustomId\n  }\n\n  // doAll variable contains all the Design Options values\n  const doAll = this.applyDO('all')\n}\n")),(0,s.kt)("h3",{id:"return-value"},"Return value"),(0,s.kt)("p",null,"Inside the ",(0,s.kt)("inlineCode",{parentName:"p"},"return")," statement you need to write the JSX markup of your element."),(0,s.kt)("p",null,"It is important to understand that the ",(0,s.kt)("inlineCode",{parentName:"p"},"editor")," property (that we assigned to a variable above) should be set on the elements outermost container. We do it by using the ",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"},"spread operator"),"."),(0,s.kt)("p",null,"It is recommended to set the ",(0,s.kt)("inlineCode",{parentName:"p"},"id")," attribute with the ",(0,s.kt)("inlineCode",{parentName:"p"},"id")," property on the outermost container as well, however, that not always mandatory. ",(0,s.kt)("strong",{parentName:"p"},"Please note that the ",(0,s.kt)("inlineCode",{parentName:"strong"},"id")," attribute cannot be set to the same element as the ",(0,s.kt)("inlineCode",{parentName:"strong"},"customProps")," variable, as there will be a conflict of ",(0,s.kt)("inlineCode",{parentName:"strong"},"id")," values.")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"doAll")," variable is an object with Design Options values, and it needs to be set via the spread operator for the same element that has a ",(0,s.kt)("inlineCode",{parentName:"p"},"vce")," class name."),(0,s.kt)("p",null,"See full element example below."),(0,s.kt)("h2",{id:"example"},"Example"),(0,s.kt)("p",null,"The example below is the simple Text Block element."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react'\nimport vcCake from 'vc-cake'\n\nconst vcvAPI = vcCake.getService('api')\n\nexport default class TextBlockElement extends vcvAPI.elementComponent {\n  render () {\n    const { id, atts, editor } = this.props\n    // destructuring assignment for attributes from settings.json with public access\n    const { output, customClass, metaCustomId, extraDataAttributes } = atts\n    let textBlockClasses = 'vce-text-block'\n    const wrapperClasses = 'vce-text-block-wrapper vce'\n    const customProps = this.getExtraDataAttributes(extraDataAttributes)\n\n    if (typeof customClass === 'string' && customClass) {\n      textBlockClasses = textBlockClasses.concat(' ' + customClass)\n    }\n\n    if (metaCustomId) {\n      customProps.id = metaCustomId\n    }\n\n    const doAll = this.applyDO('all')\n\n    return (\n      <div className={textBlockClasses} {...editor} {...customProps}>\n        <div className={wrapperClasses} id={'el-' + id} {...doAll}>\n          {output}\n        </div>\n      </div>\n    )\n  }\n}\n")))}m.isMDXComponent=!0}}]);